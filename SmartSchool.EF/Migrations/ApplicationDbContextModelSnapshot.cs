// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartSchool.EF;

#nullable disable

namespace SmartSchool.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartSchool.Core.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("SubjectDetailId");

                    b.HasIndex("Title", "SubjectDetailId")
                        .IsUnique();

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("AttachmentFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Descripion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubjectDetailId")
                        .HasColumnType("int");

                    b.Property<string>("VedioUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectDetailId");

                    b.HasIndex("Name", "SubjectDetailId")
                        .IsUnique();

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("LimitTime")
                        .HasColumnType("int");

                    b.Property<int>("SubjectDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectDetailId");

                    b.HasIndex("ExamDate", "GroupId", "SubjectDetailId")
                        .IsUnique();

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.ExamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Year")
                        .IsUnique();

                    b.ToTable("ExamTypes");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Stage")
                        .IsUnique();

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcademicYear")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("Name", "AcademicYear", "GradeId")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Guardian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RelationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SecondryPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RelationTypeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.RelationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RelationTypes");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Resulte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Mark")
                        .HasColumnType("float");

                    b.Property<string>("Rate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectDetailId");

                    b.HasIndex("StudentId", "SubjectDetailId")
                        .IsUnique();

                    b.ToTable("Resultes");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Qualification")
                        .IsUnique();

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("GuardianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("GuardianId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.StudentAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttendanceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("StudentId", "AttendanceDate")
                        .IsUnique();

                    b.ToTable("StudentAttendances");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.SubjectDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("GradeId", "SubjectId")
                        .IsUnique();

                    b.ToTable("SubjectDetails");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.SubmittedAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("ChekeState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Mark")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId", "AssignmentId")
                        .IsUnique();

                    b.ToTable("SubmittedAssignment");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.TeacherHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAgreeded")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId", "StartDate")
                        .IsUnique();

                    b.ToTable("TeacherHolidays");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.TeachingSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcademicYear")
                        .HasColumnType("datetime2");

                    b.Property<int>("Semster")
                        .HasColumnType("int");

                    b.Property<int>("SubjectDetailId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectDetailId");

                    b.HasIndex("TeacherId", "SubjectDetailId", "AcademicYear", "Semster")
                        .IsUnique();

                    b.ToTable("TeachingSubjects");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.TimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectDetailId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectDetailId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("GroupId", "DayOfWeek", "StartTime")
                        .IsUnique();

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Assignment", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.SubjectDetail", "SubjectDetail")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SubjectDetail");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Content", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.SubjectDetail", "SubjectDetail")
                        .WithMany("Contents")
                        .HasForeignKey("SubjectDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SubjectDetail");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Exam", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.ExamType", "ExamType")
                        .WithMany("Exams")
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.Group", "Group")
                        .WithMany("Exams")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.SubjectDetail", "SubjectDetail")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ExamType");

                    b.Navigation("Group");

                    b.Navigation("SubjectDetail");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Group", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.Grade", "Grade")
                        .WithMany("Groups")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Guardian", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.RelationType", "RelationType")
                        .WithMany("Guardians")
                        .HasForeignKey("RelationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.User", "User")
                        .WithOne("Guardian")
                        .HasForeignKey("SmartSchool.Core.Models.Guardian", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Resulte", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.Student", "Student")
                        .WithMany("Resultes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.SubjectDetail", "SubjectDetail")
                        .WithMany("Resultes")
                        .HasForeignKey("SubjectDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubjectDetail");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Student", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.Guardian", "Guardian")
                        .WithMany("Students")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SmartSchool.Core.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Guardian");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.StudentAttendance", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.Student", "Student")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.Teacher", "Teacher")
                        .WithMany("StudentAttendances")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.SubjectDetail", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.Grade", "Grade")
                        .WithMany("SubjectDetails")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.Subject", "Subject")
                        .WithMany("SubjectDetails")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.SubmittedAssignment", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.Assignment", "Assignment")
                        .WithMany("SubmittedAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.Student", "Student")
                        .WithMany("SubmittedAssignments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Teacher", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.Specialty", "Specialty")
                        .WithMany("Teachers")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("SmartSchool.Core.Models.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.TeacherHoliday", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.Teacher", "Teacher")
                        .WithMany("TeacherHolidays")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.TeachingSubject", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.SubjectDetail", "SubjectDetail")
                        .WithMany("TeachingSubjects")
                        .HasForeignKey("SubjectDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.Teacher", "Teacher")
                        .WithMany("TeachingSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SubjectDetail");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.TimeTable", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.Group", "Group")
                        .WithMany("TimeTables")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.SubjectDetail", "SubjectDetail")
                        .WithMany("TimeTables")
                        .HasForeignKey("SubjectDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartSchool.Core.Models.Teacher", "Teacher")
                        .WithMany("TimeTables")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("SubjectDetail");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.User", b =>
                {
                    b.HasOne("SmartSchool.Core.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Assignment", b =>
                {
                    b.Navigation("SubmittedAssignments");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.ExamType", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Grade", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("SubjectDetails");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Group", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Students");

                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Guardian", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.RelationType", b =>
                {
                    b.Navigation("Guardians");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Specialty", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Student", b =>
                {
                    b.Navigation("Resultes");

                    b.Navigation("StudentAttendances");

                    b.Navigation("SubmittedAssignments");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Subject", b =>
                {
                    b.Navigation("SubjectDetails");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.SubjectDetail", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Contents");

                    b.Navigation("Exams");

                    b.Navigation("Resultes");

                    b.Navigation("TeachingSubjects");

                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.Teacher", b =>
                {
                    b.Navigation("StudentAttendances");

                    b.Navigation("TeacherHolidays");

                    b.Navigation("TeachingSubjects");

                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("SmartSchool.Core.Models.User", b =>
                {
                    b.Navigation("Guardian")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("Teacher")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
